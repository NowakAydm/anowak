
(require 'string)
(require 'list)
(require 'comments)

(global-set-key (kbd "C-c h") 'insert-header-perso)
(setq write-file-hooks (cons 'update-header write-file-hooks))

(set 'user-login (let ((login (getenv "USER"))) login))
(set 'user-mail (let ((mail (getenv "MAIL"))) mail))

(set 'left-margin 5)
(set 'right-margin 5)
(set 'info-width 41)

(set 'ft-1 "        :::      ::::::::")
(set 'ft-2 "      :+:      :+:    :+:")
(set 'ft-3 "    +:+ +:+         +:+  ")
(set 'ft-4 "  +#+  +:+       +#+     ")
(set 'ft-5 "+#+#+#+#+#+   +#+        ")
(set 'ft-6 "     #+#    #+#          ")
(set 'ft-7 "    ###   ########.fr    ")
(set 'ft-width 25)

;=====================================================================;

(defun chop-long-name (str n)
  (if (> (length str) n)
	  (let* ((nmax (- n 3)) (newname (substring str 0 nmax)))
		(concat newname "..."))
	str)
  )

(defun insert-header-line-4-filename ()
  (let ((filename (chop-long-name (file-name-nondirectory (buffer-file-name)) 41)))
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%-41s" filename))
  (insert ft-2)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
   )
  )

(defun header-made-by ()
  (let* ((mail-width (- info-width (+ (length user-login) 7)))
		 (by (concat "By: " user-login " <" (chop-long-name user-mail mail-width) "> "))
		 )
	by)
  )

(defun insert-header-line-6-madeby ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%-41s" (header-made-by)))
  (insert ft-4)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
  )

(defun insert-header-line-8-created ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%-41s" (concat "Created: " (format-time-string "%Y/%m/%d %T") " by " user-login)))
  (insert ft-6)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
  )

(defun insert-header-line-9-updated ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%-41s" (concat "Updated: " (format-time-string "%Y/%m/%d %T") " by " user-login)))
  (insert ft-7)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  )


(defun insert-header-line-3 ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%41s" ""))
  (insert ft-1)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
  )
(defun insert-header-line-5 ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%41s" ""))
  (insert ft-3)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
  )
(defun insert-header-line-7 ()
  (insert (comments-start-token))
  (insert (format "%3s" ""))
  (insert (format "%41s" ""))
  (insert ft-5)
  (insert (format "%5s" ""))
  (insert (comments-end-token))
  (newline)
  )

(defun insert-header-perso ()
  (interactive)
  (save-excursion
	(if (or (bobp) (/= (char-after 1) 47))
	  (progn
		(goto-char (point-min))
		(comments-insert-bar)
		(comments-insert-empty-line)
		(insert-header-line-3)
		(insert-header-line-4-filename)
		(insert-header-line-5)
		(insert-header-line-6-madeby)
		(insert-header-line-7)
		(insert-header-line-8-created)
		(insert-header-line-9-updated) (newline)
		(comments-insert-empty-line)
		(comments-insert-bar))
	  )
	)
  )

(defun update-header ()
  (interactive)
  (save-excursion
	(if (buffer-modified-p)
		(progn
		  (goto-char (point-min))
		  (if (search-forward "Updated" nil t)
			  (progn
				(delete-region
				 (progn (beginning-of-line) (point))
				 (progn (end-of-line) (point)))
				(insert-header-line-9-updated)
				)
			)
		  )
	  )
	)
  nil)

(provide 'header)
